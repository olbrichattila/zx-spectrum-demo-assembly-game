.injectopt subroutine
#include "routines/definitions.z80asm"
begin:
    .model Spectrum48
    .org 32768
    jp main
    #include "routines/sprite.z80asm"
    #include "routines/helpers.z80asm"
    #include "routines/sound.z80asm"
    #include "routines/timer.z80asm"
main: 
    ; We want a black screen, green default icons.
    ld a,%0000100
    ld (varPermanentCurrentColours),a
    xor a
    call romSetPermanentColors
    call romClearScreen
    call displayInstructions
    call waitForSKeyPressed
gameBegin:
    call resetGameVariables
    call resetTimer
    call romClearScreen
    call displayScoreBar
    call displayTimerIfNecessary
    call drawGrass

mainLoop:	
    halt			
    call timerEvent	
    call displayTimerIfNecessary
    call hasTimerExpired
    jr z, timeExpired	
    call deletePlayerSprite
    call deleteFighterSprite
    call movePlayerByKeyboard
    call drawPlayerSprite
    call moveFighter
    call drawFighterSprite
    call detectSootKeyPressed
    call deletePrevousBullet 
    call shoot
    call detectPlayerFighterCollision
    jr c, gameOverDueToCrash
    call detectBulletHit
    jr mainLoop

gameOverDueToCrash:
    call waitForSKeyPressed
    jp gameBegin

timeExpired:
    ld hl,startOverMessage
	call showMessage
    call waitForSKeyPressed
    jp gameBegin

moveFighter:
    ld a, (fighterXcoordinate)
    dec a
    jr nz, continueToMoveFighter
    call resetFighterToRandomizedPosition
    ret
    continueToMoveFighter:
	ld (fighterXcoordinate), a
	ret

resetFighterToRandomizedPosition:
	call getRandomNumber
	cp 167
	jr nc, resetFighterToRandomizedPosition
    cp 16
    jr c, resetFighterToRandomizedPosition
	ld (fighterYcoordinate), a
	ld a, 232
    ld (fighterXcoordinate), a
    ret

movePlayerByKeyboard
    ld a,(playerYcoordinate)
    inc a
    cp 170
    jr nc, alreadyAtBottomPosition
    ld (playerYcoordinate),a
alreadyAtBottomPosition:
    ld bc,#7FFE
    in a,(c)
    bit 3, a
    jr z, isNKeyPressed 
    bit 2, a
    jr z, isMKeyPressed
moveVertically:
    ld bc,#FDFE
    in a,(c)
    bit 0, a
    jr z, isAKeyPressed
    ld bc,#FEFE
    in a,(c)
    bit 1, a
    jr z, isZKeyPressed
    ret
isNKeyPressed:
    ld a,(playerXcoordinate)
    dec a
    ret z
    ld (playerXcoordinate),a
    jp moveVertically
isMKeyPressed:
    ld a,(playerXcoordinate)
    inc a
    cp 232
    ret nc
    ld (playerXcoordinate),a
    jp moveVertically
isAKeyPressed:
    ld a,(playerYcoordinate)
    dec a
    dec a
    dec a
    cp 16
    ret c
    ld (playerYcoordinate),a
    ret
isZKeyPressed:
    ld a,(playerYcoordinate)
    inc a
    cp 167
    ret nc
    ld (playerYcoordinate),a
    ret

detectSootKeyPressed:
    ld bc,#7FFE
    in a,(c)
    bit 0, a
    jr z, spaceKeyPressed
    ret

spaceKeyPressed:
    ld a, (isShooting)
    cp a, 1
    ret z 
    call outputZapSound
    ld a, (playerXcoordinate)
    add a,16
    ld (bulletXcoordinate), a
    ld a, (playerYcoordinate)
    add a,8 
    ld (bulletYcoordinate), a
    ld a, 1
    ld (isShooting), a
    ret

deletePrevousBullet:
    ld a, (isShooting)
    cp a, 1
    ret nz
    ld a,(delBulletXcoordinate)
    ld c,a
    ld a, (delBulletYcoordinate)
    ld b,a
    call yx2pix
    ld a, 0
    ld (de), a
    ret

 shoot:
    ld a, (isShooting)
    cp a, 1
    ret nz
    ld a,(bulletXcoordinate)
    ld (delBulletXcoordinate), a
    cp 232
    jr c, bulletStillflying
    ld a, 0
    ld (isShooting), a
    ret

bulletStillflying:
    ld c,a
    ld a,(bulletYcoordinate)
    ld (delBulletYcoordinate), a
    ld b,a
    call yx2pix
    ld a, %10101010
    ld (de), a
    ld a,(bulletXcoordinate)  
    add a, 8
    ld (bulletXcoordinate),a
    ret

detectPlayerFighterCollision:
	ld a, (playerYcoordinate)
	ld b, a
	ld a, (fighterYcoordinate)
	sub b
	cp 16
	ret nc
	ld a, (playerXcoordinate)
	ld b, a
	ld a, (fighterXcoordinate)
	sub b
	cp 20 
	ret nc
	call outputGameOverSound
    ld hl,gameOverMessage
	call showMessage
	ld a, 1
	rrc a
	ret

detectBulletHit:
	ld a, (isShooting)
	cp a, 1
	ret nz
	ld a, (fighterYcoordinate)
	ld b, a
	ld a, (delBulletYcoordinate)
	sub b
	cp 16
	ret nc
	ld a, (fighterXcoordinate)
	ld b, a
	ld a, (delBulletXcoordinate)
	sub b
	cp 20 
	ret nc
    ; If the player is closer to the end of the screen, gets more score
	ld hl, (score)
    inc hl
    ld a, (playerXcoordinate)
    ld e,a
    ld d, 0
	add hl, de
	ld (score), hl
    call outputHitSound
    call displayScoreBar
    call deleteFighterSprite
    call resetFighterToRandomizedPosition
	ret

deletePlayerSprite:
	ld a,(playerXcoordinate)
	ld c,a
	ld a,(playerYcoordinate)
	ld b,a
    call deleteSprite
    ret

deleteFightersprite:
	ld a,(fighterXcoordinate)
    ld c,a
	ld a,(fighterYcoordinate)
	ld b,a
    call deleteSprite
    ret;

drawPlayerSprite:
	ld a,(playerXcoordinate)
	ld c,a
	ld a,(playerYcoordinate)
	ld b,a
    ld hl,playerSpriteData0
    call drawSprite
    ret

drawFighterSprite:
	ld a,(fighterXcoordinate)
	ld c,a
	ld a,(fighterYcoordinate)
	ld b,a
    ld hl,fighterSpriteData0
    call drawSprite
    ret

displayInstructions:
    ld hl,instructionsMessage
	call showMessage
    ret

waitForSKeyPressed:
    ld bc,#FDFE
    in a,(c)
    bit 1, a
    jr nz, waitForSKeyPressed 
    ret
    
resetGameVariables:
    ld a, 0
    ld (playerXcoordinate), a
    ld (bulletXcoordinate), a
    ld (bulletYcoordinate), a
    ld (delBulletXcoordinate), a
    ld (delBulletYcoordinate), a
    ld (isShooting), a
    ld hl, 0
    ld (score), hl
    ld a, 232
    ld (fighterXcoordinate), a
    ld a, 32
    ld (fighterYcoordinate), a
    ld a, 166
    ld (playerYcoordinate), a
    ret

displayTimerIfNecessary:
    ld hl, (timer)
    ld a,l
    cp 0
    ret nz
    call showTimerBar
    ld de, (timer)
    ld h,0
    ld l,d
    call displayNum
    ret

displayScoreBar:
    call showScoreBar
    ld hl, (score)
    call displayNum
    ret

drawGrass:
    ld c,232
    ld b, 191 - 8
drawGrassLoop:
    ld hl,grassSprite
    push bc
    call drawStaticSprite
    pop bc
    ld a, c
    sub 16
    ld c,a
    jr nc, drawGrassLoop
    ld c,0
    ld b, 191 - 8
    ld hl,grassSprite
    call drawStaticSprite
    ret

#include "data.z80asm"
#include "sprites.z80asm"
#include "messages.z80asm"

